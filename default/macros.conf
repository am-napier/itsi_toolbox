[service_tree_dependencies(1)]
args = n
definition = | appendpipe [ | where level=$n$\
      | stats values(id) as f | eval f=printf("^(%s)$", mvjoin(f, "|"))\
      | map maxsearches=1 search="| rest report_as=text splunk_server=local /servicesNS/nobody/SA-ITOA/itoa_interface/service fields=\"services_depends_on,_key,title\" filter=\"{\\\"_key\\\":{\\\"$regex\\\":\\\"$f$\\\"}}\""\
      | eval s=spath(value, "{}") | mvexpand s\
      | eval title=spath(s, "title"), svc=spath(s, "_key"), deps=spath(s, "services_depends_on{}")\
      | mvexpand deps | eval id=mvappend(svc, spath(deps, "serviceid")) | mvexpand id | dedup id | eval level=if(svc==id, $n$, $n$+1)\
      | fields - value, deps, s, splunk_server\
]
errormsg = N must be an integer
iseval = 0
validation = isint($n$)

[itoa_rest(4)]
args = type,key,value,fields
definition = rest report_as=text splunk_server=local /servicesNS/nobody/SA-ITOA/itoa_interface/$type$ filter="{\"$key$\": {\"$regex\":\"$value$\"}}" fields="$fields$"\
| eval value=spath(value, "{}")\
| mvexpand value\
| eval title=spath(value, "title"), id=spath(value, "_key")
iseval = 0

[itoa_rest(3)]
args = type,key,value
definition = `itoa_rest($type$, $key$, $value$, "title,_key")`
iseval = 0

[get_svc_json(3)]
args = key,value,fields
definition = `itoa_rest("service", $key$, $value$, "$fields$")`
iseval = 0

[get_svc_json(2)]
args = key,value
definition = `itoa_rest("service", $key$, $value$, "")`
iseval = 0

[get_entity_json(3)]
args = key,value,fields
definition = `itoa_rest("entity", $key$, $value$, "$fields$")`
iseval = 0

[get_entity_json(2)]
args = key,value
definition = `itoa_rest("entity", $key$, $value$, "")`
iseval = 0

[get_payload(1)]
args = field_name
definition = | stats values($field_name$) as $field_name$ | eval payload=printf("[%s]", mvjoin($field_name$, ","))
iseval = 0

[get_payload]
definition = `get_payload(payload)`
iseval = 0

[pp]
definition=`|prettyprint`
iseval=0


[entity_filter(2)]
args = field_name,field_value
definition = json_object("field", "$field_name$", "field_type", "info", "value", "$field_value$", "rule_type","matches")
iseval = 0

[entity_filter(3)]
args = field_name,field_value,field_type
definition = json_object("field", "$field_name$", "field_type", "$field_type$", "value", "$field_value$", "rule_type","matches")
iseval = 0

[entity_filter(4)]
errormsg = entity_filter(4) requires field_name, field_value field_type AS info, alias, title or entity_type and match_type AS matches or not
validation = $match_type$ IN ("matches", "not") AND $field_type$ IN ("info","alias","title","entity_type")
args = field_name,field_value,field_type,match_type
definition = json_object("field", "$field_name$", "field_type", "info", "value", "$field_value$", "rule_type","$match_type$")
iseval = 0
