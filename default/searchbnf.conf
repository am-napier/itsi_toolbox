[matchtable-command]
syntax = matchtable \
    (inputcols=<list>)? \
    (outputcols=<list>)? \
    (lookup=<string>)? \
    (where=<string>)? \
    (debug=<string>)
shortdesc = BMC-ish match table
description = Finds the row that matches the specified lookup.\p\\
    based on inputcols specified, in the order left to right\
    using equals then starts/ends with and finally contains fields last.\p\\
    Returns outputcols evaluating any substitutions as per the\
    string_template command.
comment1 = example
example1 = | matchtable inputcols="host,object,parameter" outputcols="severity,resolver_group" lookup="my_match_table.csv"
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming

[barocstringformat-command]
syntax = barocstringformat \
    (input_field=<string>)? \
    (output_field=<string>)? \
    (debug=<string>)
alias =
shortdesc = Parse baroc logical statements to strings.
description = \
    This command ...
comment1 = \
    This example ..
example1 = | barocstringformat input_field=this_field output_field=new debug=true
category = streaming
appears-in = itsi_toolbox
maintainer = anapier@splunk.com
usage = public
tags = itsi_toolbox

[matchtablerex-command]
syntax = matchtablerex \
    (regex=<string>)? \
    (field=<string>)? \
    (outputcols=<list>)? \
    (lookup=<string>)? \
    (where=<string>)?\
    (sort=<string>)?

shortdesc = match table using regex
description = Finds the row that contains the field that matches the specified regex.\p\\
    Returns the first match found based on the supplied sort order if any.
comment1 = example
example1 = | matchtablerex regex="host_name" field="host" outputcols="severity,resolver_group" lookup="my_match_table_rex.csv" sort="- order"
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming

[episodeupdate-command]
syntax = episodeupdate
shortdesc = Updates an ITSI Notable Event Episode
description = This command changes episode state and/or severity.\p\\
    Requires each event to carry itsi_group_id, itsi_policy_id.  Each event should have severity and/or status.\
    If they are not included no action will be taken.  If the episode should also be broken pass break=<boolean> \p\\
    Title, description, owner etc can not be modified here.
comment1 = Change the episode based on event properties
example1 = ... | episodeupdate
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming

[hecit-command]
syntax = hecit \
    (token=<string>)? \
    (server=<string>)? \
    (port=<int>)? \
    (severity=<fieldname>)? \
shortdesc = Post events to a HEC
description = This command sends your event to a HEC endpoint\p\\
comment1 = simple event
example1 = | makeresults | eval sev=2, message="hello, hec!" | hecit token=<token> server=<server> port=<8089> severity=sev
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming


[rmentity-command]
syntax = rmentity  (by_id=<boolean>)?  (is_rex=<boolean>)?  (dry_run=<boolean>)?
shortdesc = Delete entities from the kvstore
description = This command deletes entities from the kvstore, so make sure you have a good backup first!\p\\
    There is no undo!!!\p\\
    Provide either a field in each row with the kvstore id or a pair of filter_key and filter_value\
    id is the default mode, set by_id=f to use filtering.\
    use dry_run=t with by_id=f to see the likely effect.\
    Note the no pagination can be done and a single delete like filter_key="title" with filter_value=".*"\
    could cause timeouts with very large volumes so do some smart regex like filter_value="title1|title2|...|title100"\
    if you really need to batch this up.
    
comment1 = By ID - Delete all entities one by one (slow)
example1 = | makeresults | eval id="<kvstore_id>" | rmentity
comment2 = By Filter - Note the dry_run to check what you could delete
example2 = | makeresults | eval filter_key="title", filter_value=".*\" | rmentity by_id=f dry_run=t is_rex=t
comment3 = By Filter - Do it at scale in groups of 100, this is limited by streamstats limits #kludgeelimitapibug
example3 = | inputlookup itsi_entities | fields title \
    | streamstats c \
    | eval group=floor(c/100) \
    | stats values(title) as t by group \
    | eval filter_value="^(".mvjoin(t, "|").")$", filter_key="title" \
    | fields - t \
    | rmentity is_rex=1, dry_run=0, by_id=0 \
    | fields - filter_value
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming