[episodeupdate-command]
syntax = episodeupdate
shortdesc = Updates an ITSI Notable Event Episode
description = This command changes episode state and/or severity.\p\\
    Requires each event to carry itsi_group_id, itsi_policy_id.  Each event should have severity and/or status.\
    If they are not included no action will be taken.  If the episode should also be broken pass break=<boolean> \p\\
    Title, description, owner etc can not be modified here.
comment1 = Change the episode based on event properties
example1 = ... eval itsi_group_id | episodeupdate
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming



[confitsi-command]
syntax = confitsi is_partial=<boolean> type=<string> is_bulk=<boolean> payload=<string> dry_run=<boolean>
shortdesc = Cooking with ITSI
description = Updates ITSI config in the kvstore using rest calls.\p\\
    It can operate on anything supported via itoa_interface as long as the schema provided is accurate and the object is writable\
    for the current user.  Best results when using a single payload, see macro get_payload
    
comment1 = Create some services
example1 = | makeresults count=3 | streamstats c
| eval id="service_".c, desc="my updated description ".strftime(now(), "%F %T")
| eval cfg=json_object("_key", id, "title", id, "description", desc)
| stats values(cfg) as payload
| eval payload=printf("[%s]", mvjoin(payload, ","))
| confitsi is_bulk=1 is_partial=1 payload=payload type=service 
comment2 = Update the descriptions
example2 = | rest report_as=text splunk_server=local /servicesNS/nobody/SA-ITOA/itoa_interface/service filter="{\"title\":{\"$regex\":\"^service_[1-3]$\"}}" \
| eval value=spath(value, "{}") \
| mvexpand value \
| eval id=spath(value, "_key"), desc="my new updated description ".strftime(now(), "%F %T") \
| eval cfg=json_object("_key", id, "description", desc) \
| stats values(cfg) as payload \
| eval payload=printf("[%s]", mvjoin(payload, ",")) \
| confitsi is_bulk=1 is_partial=1 payload=payload type=service debug=0 
comment3 = Change some entity titles
example3 = | `itoa_rest("entity", "entity_type_ids", "windows", "")` \
| eval host=spath(value, "host{}"), payload=json_object("_key", id, "title", "".lower(title), "host", json_array(lower(title))) \
| `get_payload` \
| confitsi type=entity 
comment4 = Set the urgency on some kpis
example4 = | `itoa_rest("service", "_key", "^a$", "")` \
| eval payload=spath(value, "kpis{}") \
| fields - value \
| mvexpand payload \
| eval kpi_title=spath(payload, "title") \
| search kpi_title IN (k2, k3) \
| eval payload=json_set(payload, "urgency", 2) \
| stats values(payload) as payload by id \
| eval payload=printf("[{\"_key\": \"a\", \"kpis\":[%s]}]", mvjoin(payload, ",")) \
| confitsi type=service debug=0



usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = generating


[itsidelete-command]
syntax = itsidelete  (mode=<string>)?  (is_rex=<boolean>)?  (debug=<boolean>)? (type=<string>)?
shortdesc = Delete entities from the kvstore
description = This command deletes entities from the kvstore, so make sure you have a good backup first!\p\\
    There is no undo!!!\p\\
    This is a streaming command and can delete one object at a time but that is slow.  It can also be used in batch with filters.
    See examples for different uses.

    Options:
      mode (string) - id: deletes by the value in the field called id, this will be matched to the _key in kvstore
             filter: will delete all records that match the filter, eg app=ACME, see is_rex for more info
      type (string) - is one of the valid types from get_supported_object_types REST call, defaults to entity
      is_rex (bool) - when set to 1 it treats the value part of the filter as a regex, eg app=ACME app is the key, .*ACME.*\
              is the filter value.  defaults to 0
      dry_run - doesn't actually do the delete but tests the filter and feeds back the results.  You can test the filter\
                 using some REST calls too if you are not wearing the right safety boots or currently going commando.
    
comment1 = By ID - Delete all objects one by one (slow)
example1 = | inputlookup itsi_entities where title=foo* | rename _key as id | itsidelete type=entity
comment2 = By Filter - Test the delete of all services that contain the word linux, note the dry_run to check what you could delete.
example2 = | makeresults | eval filter="title=linux" | itsidelete mode=filter dry_run=1 is_rex=1 type=service
comment3 = By Filter - Delete all objects in your system ;)  Well seems to fail on the ones that are not user editable but hopefully you get the idea.
example3 = | rest report_as=text splunk_server=local /servicesNS/nobody/SA-ITOA/itoa_interface/get_supported_object_types
| eval types=spath(value, "{}") | mvexpand types | fields types
| map maxsearches=20 search="| makeresults | eval filter=\"_key=.+\" | itsidelete is_rex=1 dry_run=1 type=$types$ mode=filter"
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming

[kpiurgency-command]
syntax = <search that gets service_id and kpi_id> | kpiurgency default=<int>
shortdesc = sets the urgency of the kpi in service, returns the KPI config 
description = Does not make any updates, see confitsi for that task.

comment1 = set all bah* kpis in all foo* services to 5 (the default)
example1 = | `service_kpi_list` | search service_name=foo* kpi_name=bah* | kpiurgency
comment2 = set all bah* kpis in all foo* services to 9 
example2 = | `service_kpi_list` | search service_name=foo* kpi_name=bah* | kpiurgency default=9
comment3 = set all bah* kpis in all foo* services to random values between 3 and 10
example3 = | `service_kpi_list` | search service_name=foo* kpi_name=bah* | eval urgency=random()%7+3 
| kpiurgency 

usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming


[prettyprint-command]
syntax = prettyprint  fields=<string> (indent=<int>) (removex=<string>)
shortdesc = prints all pretty like
description = Format any JSON fields listed in fields CSV list.\
  Remove keys in the remove CSV list.\
  Indent as specified!
comment1 = example 1
example1 = <rest call to get services> | prettyprint fields="value" remove="kpis" indent=4
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming


[tableoutput-command]
syntax = tableoutput  fields=<string> output=<string> (header=<string>) (footer=<string>)
shortdesc = prints table formatted data by copying any fields in the specified order into the output field.\
    Provide optional header and footer
description = tbc
comment1 = example
example1 = search string ... | tableoutput fields="timestamp,host,description"\
        header="Service Desk Notes\n========================" \
        footer="------------------"
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming


[servicedependency-command]
syntax = servicedependency  parent=<serviceid> child=<serviceid> kpiid=<kpi id> (mode=add|remove)
shortdesc = update the service dependency link between two services.
description = tbc
comment1 = example
example1 = | makeresults | eval parent=xxx, child=yyy kpiid=zzz urgency=7 | servicedependency mode=add default_urgency=2\
        blahh line 1ยง \
        balh line 2
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming

[kpiurgency-command]
syntax = kpiurgency  (default_urgency=<int>)
shortdesc = update the urgency of a KPI to its containing service.
description = urgency can be integer values 0-11
comment1 = example
example1 = | makeresults | eval service=<service id>,  kpiid=<kpi id> urgency=<int> | kpiurgency default_urgency=2\
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming