[episodeupdate-command]
syntax = episodeupdate
shortdesc = Updates an ITSI Notable Event Episode
description = This command changes episode state and/or severity.\p\\
    Requires each event to carry itsi_group_id, itsi_policy_id.  Each event should have severity and/or status.\
    If they are not included no action will be taken.  If the episode should also be broken pass break=<boolean> \p\\
    Title, description, owner etc can not be modified here.
comment1 = Change the episode based on event properties
example1 = ... eval itsi_group_id | episodeupdate
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming


[confitsi-command]
syntax = confitsi is_partial=<boolean> type=<string> is_bulk=<boolean> payload=<string> dry_run=<boolean>
shortdesc = Cooking with ITSI
description = Updates ITSI config in the kvstore using rest calls.\p\\
    It can operate on anything supported via itoa_interface as long as the schema provided is accurate and the object is writable\
    for the current user.  Best results when using a single payload, see macro get_payload
    
comment1 = Create some services
example1 = | makeresults count=3 | streamstats c \
| eval id="service_".c, desc="my updated description ".strftime(now(), "%F %T") \
| eval payload=json_object("_key", id, "title", id, "description", desc) \
  `get_payload` \
| confitsi type=service confirm=1
comment2 = Update the descriptions
example2 = | rest report_as=text splunk_server=local /servicesNS/nobody/SA-ITOA/itoa_interface/service filter="{\"title\":{\"$regex\":\"^service_[1-3]$\"}}" \
| eval value=spath(value, "{}") \
| mvexpand value \
| eval id=spath(value, "_key"), desc="my new updated description ".strftime(now(), "%F %T") \
| eval payload=json_object("_key", id, "description", desc) \
   `get_payload` \
| confitsi type=service confirm=1
comment3 = Change some entity titles
example3 = | `itoa_rest("entity", "entity_type_ids", "windows", "")` \
| eval host=spath(value, "host{}"), payload=json_object("_key", id, "title", "".lower(title), "host", json_array(lower(title))) \
| `get_payload` \
| confitsi type=entity confirm=1
comment4 = Set the urgency on some kpis
example4 = | `itoa_rest("service", "_key", "^a$", "")` \
| eval payload=spath(value, "kpis{}") \
| fields - value \
| mvexpand payload \
| eval kpi_title=spath(payload, "title") \
| search kpi_title IN (k2, k3) \
| eval payload=json_set(payload, "urgency", 2) \
| stats values(payload) as payload by id \
| eval payload=printf("[{\"_key\": \"a\", \"kpis\":[%s]}]", mvjoin(payload, ",")) \
| confitsi type=service confirm=1
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming


[itsidelete-command]
syntax = | itsidelete  pattern=<regex> (field=<field_name>)  (confirm=<boolean>)? (type=<string>)?
shortdesc = Delete entities from the kvstore that match the regex pattern in field
description = This command deletes objects from the kvstore, so make sure you have a good backup first!\p\\
    There is no undo!!!\p\\
    This is a generating command and deletes in batch

    Options:
      pattern (regex) - the non anchored regex we are deleting with
      field (string) - name of the field that is being matched
      type (string) - is one of the valid types from get_supported_object_types REST call, defaults to entity
      confirm - doesn't actually do the delete but tests the filter and feeds back the results.  You can test the filter\
                 using some REST calls too if you are not wearing the right safety boots or wearing the wrong pants.
    
comment1 = deletes all entities that have a title starting with ABC
example1 = | itsidelete type=entity debug=0 property=^ABC
comment2 = deletes all entities that have a host field containing the string us0
example2 = | itsidelete type=entity debug=0 property=us0 field=host
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = generating


[mwcal-command]
syntax = | itsidelete  pattern=<regex> (field=<field_name>)  (confirm=<boolean>)? (type=<string>)?
shortdesc = Delete entities from the kvstore that match the regex pattern in field
description = This command deletes objects from the kvstore, so make sure you have a good backup first!\p\\
    There is no undo!!!\p\\
    This is a generating command and deletes in batch

    Options:
      pattern (regex) - the non anchored regex we are deleting with
      field (string) - name of the field that is being matched
      type (string) - is one of the valid types from get_supported_object_types REST call, defaults to entity
      confirm - doesn't actually do the delete but tests the filter and feeds back the results.  You can test the filter\
                 using some REST calls too if you are not wearing the right safety boots or wearing the wrong pants.
    
comment1 = list all MW that start with a title that starts with Foo
example1 = | makeresults | mwcal title=^Foo
comment2 = delete all MWs while a title that starts with Foo 
example2 = | makeresults | mwcal title=^Foo mode=delete confirm=1
comment3 = Create a window for a group of hosts starting with foo
example3 = | inputlookup itsi_entities where host=foo* | eval id=_key | mwcal title=Foo mode=create start=now() duration=60 confirm=1
comment4 = Update the Foo window, increase the duration to 120 mins start in 35 mins
example4 = | makeresults | eval start=now()+35*60 duration=120 
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = generating

[mwcalstream-command]
syntax = | inputlookup-or-search | eval title="..." start=<epoch> duration=<mins> | mwcalstream  (confirm=<boolean>)? (type=<string>)?
shortdesc = Create or update maintenance windows
description = This command creates or updates MW's based on the rows its passed, one object per row!\p\\
              Expects each row to contain the body fields for the new object and the command itself adds the type plus the confirm flag
              If it succeeds it returns the IDs of the objects created
    
comment1 = read all MWs from an index and create them, assuming all correct fields exist
example1 = index=blackouts | ... | mwcalstream confirm=1
comment2 = create one example MW
example2 = | makeresults | eval title="My Window" start=now() duration=60
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming



[kpiurgency-command]
syntax = <search that gets service_id and kpi_id> | kpiurgency default=<int>
shortdesc = sets the urgency of the kpi in service, returns the KPI config 
description = Does not make any updates, see confitsi for that task.

comment1 = set all bah* kpis in all foo* services to 5 (the default)
example1 = | `service_kpi_list` | search service_name=foo* kpi_name=bah* | kpiurgency
comment2 = set all bah* kpis in all foo* services to 9 
example2 = | `service_kpi_list` | search service_name=foo* kpi_name=bah* | kpiurgency default=9
comment3 = set all bah* kpis in all foo* services to random values between 3 and 10
example3 = | `service_kpi_list` | search service_name=foo* kpi_name=bah* | eval urgency=random()%7+3 
| kpiurgency 

usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming


[prettyprint-command]
syntax = prettyprint  fields=<string> (indent=<int>) (removex=<string>)
shortdesc = prints all pretty like
description = Format any JSON fields listed in fields CSV list.\
  Remove keys in the remove CSV list.\
  Indent as specified!
comment1 = example 1
example1 = <rest call to get services> | prettyprint fields="value" remove="kpis" indent=4
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming


[tableoutput-command]
syntax = tableoutput  fields=<string> output=<string> (header=<string>) (footer=<string>)
shortdesc = prints table formatted data by copying any fields in the specified order into the output field.\
    Provide optional header and footer
description = tbc
comment1 = example
example1 = search string ... | tableoutput fields="timestamp,host,description"\
        header="Service Desk Notes\n========================" \
        footer="------------------"
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming


[servicedependency-command]
syntax = servicedependency  parent=<serviceid> child=<serviceid> kpiid=<kpi id> (mode=add|remove)
shortdesc = update the service dependency link between two services.
description = tbc
comment1 = example
example1 = | makeresults | eval parent=xxx, child=yyy kpiid=zzz urgency=7 | servicedependency mode=add default_urgency=2\
        blahh line 1ยง \
        balh line 2
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming

[kpiurgency-command]
syntax = kpiurgency  (default_urgency=<int>)
shortdesc = update the urgency of a KPI to its containing service.
description = urgency can be integer values 0-11
comment1 = example
example1 = | makeresults | eval service=<service id>,  kpiid=<kpi id> urgency=<int> | kpiurgency default_urgency=2\
usage = public
appears-in = itsi_toolbox
tags = itsi_toolbox
maintainer = anapier@splunk.com
category = streaming